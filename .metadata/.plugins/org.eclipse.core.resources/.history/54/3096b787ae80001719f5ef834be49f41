package rpc;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class test {
	public List<List<Integer>> allTriples(int[] array, int target) {
		Arrays.sort(array);
		List<List<Integer>> result = new ArrayList<List<Integer>>(); 
		// Outer loop, choose an element (0 - array.length - 2)
		for (int i = 0; i < array.length - 2; i++) {
			// jump over all dup !
			if (i > 0 && array[i] == array[i - 1]) {
				continue;
			}	      
			int left = i + 1; 
			int right = array.length - 1;
			// do 2Sum for array[i + 1 ~ array.length - 1]
			helper(array, i, target - array[i], left, right, result);
		}
		return result;
	}
	// in this helper function, we do 2 sum of target = target - array[i]
	private void helper(int[] array, int cur, int target, int left, int right, List<List<Integer>> result) {
		if (left >= right) {
			return;
		}
		List<Integer> list = new ArrayList<>(); 
		if (array[left] + array[right] == target) {
			list.add(array[cur]);
			list.add(array[left]);
			list.add(array[right]);
			result.add(list);
			// need to add "left < right" !!!
			while (left < right && array[left] == array[left - 1]) {
				left++;
			} // terminate at: array[left] != array[left - 1]
			helper(array, cur, target, left, right - 1, result);
		} else if (array[left] + array[right] > target) {
			helper(array, cur, target, left, right - 1, result);
		} else {
			helper(array, cur, target, left + 1, right, result);
		}
	}
}
